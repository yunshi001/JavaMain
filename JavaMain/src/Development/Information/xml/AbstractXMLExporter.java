package Development.Information.xml;

import java.io.BufferedOutputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.nio.file.Paths;

import javax.xml.stream.XMLOutputFactory;
import javax.xml.stream.XMLStreamException;

import com.sun.xml.internal.txw2.output.IndentingXMLStreamWriter;

import Development.OperatingSystemGenerics.Encryption.XMLSecurity;
import Development.Utilities.General.MD5Util;

public abstract class AbstractXMLExporter extends XMLSecurity {
	static enum XML_STRINGS {
		ATMDATA, TOOL_LIST, GROUPID, ALLOWED_FEED_TIME, ALLOWED_HOLES, ALLOWED_TOOL_LOAD, ALLOWED_TOOL_USAGE, ALLOWED_TOTAL_TIME, ALLOWED_WARNING_VALUE, TOOL_LOAD_ACTION, TOOL_ORDER, TOOLS_IN_GROUP, TOOL_LIFE, EXPIRED, HOLES, FEED_TIME, TOTAL_TIME, TOOL_USAGE, TOOL_LOAD, TOOL_LOAD_LIMIT, ALARM_LIMIT, H_CODE, D_CODE, LSCDATA, ISMETRIC, VALUES, POSITION, CORRECTION, MACRO_VARIABLES, VERSION, SERIAL, MACRO, NUMBER, VALUE, NETWORK_CONFIG_DATA, WIRED_NETWORK_ENABLED, WIRED_DHCP_ENABLED, WIRED_IP_ADDRESS, WIRED_SUBNET_MASK, WIRED_GATEWAY, WIRED_DNS_SERVER, WIRELESS_NETWORK_ENABLED, WIRELESS_DHCP_ENABLED, WIRELESS_IP_ADDRESS, WIRELESS_SUBNET_MASK, WIRELESS_GATEWAY, WIRELESS_DNS_SERVER, WIRELESS_ACCESS_POINT, WIRELESS_SECURITY, WIRELESS_PASSWORD, NETSHARE_HOSTNAME, NETSHARE_DOMAIN_NAME, NETSHARE_REMOTE_SHARE_ENABLED, NETSHARE_REMOTE_SERVER_NAME, NETSHARE_REMOTE_SHARE_PATH, NETSHARE_REMOTE_SHARE_USERNAME, NETSHARE_REMOTE_SHARE_PASSWORD, NETSHARE_LOCAL_SHARE_ENABLED, NETSHARE_LOCAL_SHARE_SECURITY, NETSHARE_LOCAL_SHARE_USERNAME, NETSHARE_LOCAL_SHARE_PASSWORD, TOOL_OFFSET, LENGTH_AND_WEAR, COOLANT_POSITION, LENGTH_GEOMETRY, LENGTH_WEAR, DIAMETER_GEOMETRY, DIAMETER_WEAR, FLUTES, WORK_ZERO_OFFSET, GCODE_OFFSET, GCODE, PVALUE, X_AXIS, Y_AXIS, Z_AXIS, A_AXIS, B_AXIS, C_AXIS, POCKETS_AND_TOOLS, POCKET_OFFSET, TOOL, POCKET, CATEGORY;

		public static XML_STRINGS[] getATMStringsAsArray() {
			return new XML_STRINGS[] { ATMDATA, TOOL_LIST, GROUPID, ALLOWED_FEED_TIME, ALLOWED_HOLES, ALLOWED_TOOL_LOAD,
					ALLOWED_TOOL_USAGE, ALLOWED_TOTAL_TIME, ALLOWED_WARNING_VALUE, TOOL_LOAD_ACTION, TOOL_ORDER,
					TOOLS_IN_GROUP };
		}

		public static XML_STRINGS[] getToolLifeStrings() {
			return new XML_STRINGS[] { TOOL_LIFE, EXPIRED, HOLES, FEED_TIME, TOTAL_TIME, TOOL_USAGE, TOOL_LOAD,
					TOOL_LOAD_LIMIT, ALARM_LIMIT, H_CODE, D_CODE };
		}

		public static XML_STRINGS[] getLSCStringsAsArray() {
			return new XML_STRINGS[] { LSCDATA, ISMETRIC, VALUES, POSITION, CORRECTION };
		}

		public static XML_STRINGS[] getMacroStringsAsArray() {
			return new XML_STRINGS[] { MACRO_VARIABLES, VERSION, SERIAL, MACRO, NUMBER, VALUE };
		}

		public static XML_STRINGS[] getNetworkStringsAsArray() {
			return new XML_STRINGS[] { NETWORK_CONFIG_DATA, WIRED_NETWORK_ENABLED, WIRED_DHCP_ENABLED, WIRED_IP_ADDRESS,
					WIRED_SUBNET_MASK, WIRED_GATEWAY, WIRED_DNS_SERVER, WIRELESS_NETWORK_ENABLED, WIRELESS_DHCP_ENABLED,
					WIRELESS_IP_ADDRESS, WIRELESS_SUBNET_MASK, WIRELESS_GATEWAY, WIRELESS_DNS_SERVER,
					WIRELESS_ACCESS_POINT, WIRELESS_SECURITY, WIRELESS_PASSWORD, NETSHARE_HOSTNAME,
					NETSHARE_DOMAIN_NAME, NETSHARE_REMOTE_SHARE_ENABLED, NETSHARE_REMOTE_SERVER_NAME,
					NETSHARE_REMOTE_SHARE_PATH, NETSHARE_REMOTE_SHARE_USERNAME, NETSHARE_REMOTE_SHARE_PASSWORD,
					NETSHARE_LOCAL_SHARE_ENABLED, NETSHARE_LOCAL_SHARE_SECURITY, NETSHARE_LOCAL_SHARE_USERNAME,
					NETSHARE_LOCAL_SHARE_PASSWORD };
		}

		public static XML_STRINGS[] getOffsetStringsAsArray() {
			return new XML_STRINGS[] { TOOL_OFFSET, LENGTH_AND_WEAR, COOLANT_POSITION, LENGTH_GEOMETRY, LENGTH_WEAR,
					DIAMETER_GEOMETRY, DIAMETER_WEAR, FLUTES, WORK_ZERO_OFFSET, GCODE_OFFSET, GCODE, PVALUE, X_AXIS,
					Y_AXIS, Z_AXIS, A_AXIS, B_AXIS, C_AXIS, POCKETS_AND_TOOLS, POCKET_OFFSET, TOOL, POCKET, CATEGORY };
		}
	}

	IndentingXMLStreamWriter writer = null;
	XML_STRINGS[] xmlStrings;

	public void genericSaveAsXML(String filePath) {
		try {
			BufferedOutputStream outStream = new BufferedOutputStream(new FileOutputStream(filePath));
			XMLOutputFactory output = XMLOutputFactory.newInstance();
			try {
				this.writer = new IndentingXMLStreamWriter(output.createXMLStreamWriter(outStream, "UTF-8"));
				try {
					this.saveAsXML(filePath);
				} finally {
					this.writer.close();
				}
			} catch (XMLStreamException e) {
				e.printStackTrace();
			}
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		MD5Util.writeMD5ChecksumSTAX(Paths.get(filePath), "</" + this.xmlStrings[0] + ">");
	}

	protected abstract void saveAsXML(String paramString) throws XMLStreamException;

}
